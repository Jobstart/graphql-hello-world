{"version":3,"sources":["../src/index.js"],"names":["app","executableSchema","typeDefs","printErrors","resolvers","post","json","schema","use","endpointURL","listen"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AAEA;;;;AACA;;;;;;AAGA,IAAMA,MAAM,wBAAZ;;AAEA,IAAMC,mBAAmB,wCAAqB;AAC5CC,4BAD4C;AAE5CC,eAAa,IAF+B;AAG5CC;AAH4C,CAArB,CAAzB;;AAMAJ,IAAIK,IAAJ,CAAS,UAAT,EACE,qBAAWC,IAAX,EADF,EAEE,0CAAe;AAAA,SAAO;AACpBC,YAAQN;AADY,GAAP;AAAA,CAAf,CAFF;;AAOAD,IAAIQ,GAAJ,CAAQ,WAAR,EAAqB,2CAAgB;AACnCC,eAAa;AADsB,CAAhB,CAArB;;AAIAT,IAAIU,MAAJ,CAAW,IAAX","file":"index.js","sourcesContent":["import 'source-map-support/register';\nimport 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { graphqlExpress, graphiqlExpress } from 'graphql-server-express';\nimport { makeExecutableSchema } from 'graphql-tools';\n\nimport resolvers from './resolvers';\nimport schema from './schema';\n\n\nconst app = express();\n\nconst executableSchema = makeExecutableSchema({\n  typeDefs: schema,\n  printErrors: true,\n  resolvers\n});\n\napp.post('/graphql',\n  bodyParser.json(),\n  graphqlExpress(() => ({\n    schema: executableSchema\n  }))\n);\n\napp.use('/graphiql', graphiqlExpress({\n  endpointURL: '/graphql',\n}));\n\napp.listen(8080);\n"]}